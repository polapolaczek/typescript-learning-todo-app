{"version":3,"sources":["utils/useCreateControlledContext.tsx","common-components/AddTodoForm/AddTodoFormContext.tsx","common-components/AddTodoForm/useAddTodo.tsx","common-components/AddTodoForm/Input.tsx","common-components/Button.tsx","common-components/AddTodoForm/AddButton.tsx","common-components/AddTodoForm/AddTodoForm.tsx","common-components/TodosList.tsx","common-components/TodoItem/TodoItemContext.tsx","common-components/TodoItem/RemoveButton.tsx","common-components/TodoItem/CompletionButton.tsx","common-components/TodoItem/Text.tsx","common-components/TodoItem/TodoItem.tsx","todos/useTodos.tsx","todos/TodosContext.tsx","views/MainView.tsx","constants/labels.ts","App.tsx","index.tsx"],"names":["useCreateControlledContext","contextName","context","createContext","undefined","contextValue","useContext","Error","useAddTodoContext","AddTodoContext","useAddTodo","onAdd","useState","todoInput","setTodoInput","handleTodoChange","useCallback","e","target","value","handleTodoSubmit","preventDefault","uniqueId","AddTodoInput","type","onChange","Button","props","text","children","AddButton","AddTodoForm","Provider","onSubmit","TodosList","todos","map","el","key","id","useTodoItemContext","TodoItemContext","RemoveButton","todo","onRemove","onClick","CompletionButton","isDone","onCompletion","texts","doneText","undoneText","Text","attributes","className","TodoItem","useTodos","setTodos","addTodo","prev","newTodo","removeTodo","filter","toggleDone","updateDone","prevTodo","useTodosContext","TodosContext","TodosContextProvider","MainView","Input","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42465ac0.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\n\r\nconst useCreateControlledContext = <ContextType extends unknown>(\r\n    contextName?: string\r\n) => {\r\n    const context = createContext<ContextType | undefined>(undefined);\r\n    const useControlledContext = () => {\r\n        const contextValue = useContext(context);\r\n        if (!contextValue) {\r\n            throw new Error(`${contextName} used outside of its Provider`);\r\n        }\r\n        return contextValue;\r\n    };\r\n\r\n    return [useControlledContext, context] as const;\r\n};\r\n\r\nexport default useCreateControlledContext;\r\n","import React from \"react\";\r\nimport useCreateControlledContext from \"../../utils/useCreateControlledContext\";\r\n\r\ninterface IAddTodoContext {\r\n    todoInput: string;\r\n    handleTodoChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst [useAddTodoContext, AddTodoContext] = useCreateControlledContext<\r\n    IAddTodoContext\r\n>('AddTodoContext');\r\n\r\nexport { useAddTodoContext, AddTodoContext };\r\n\r\n","import { useState, useCallback } from \"react\";\r\nimport { uniqueId } from \"lodash\";\r\n\r\nconst useAddTodo = (onAdd: (text: string, id: string) => void) => {\r\n    const [todoInput, setTodoInput] = useState<string>(\"\");\r\n\r\n    const handleTodoChange = useCallback(\r\n        (e: React.ChangeEvent<HTMLInputElement>) => setTodoInput(e.target.value),\r\n        []\r\n    );\r\n\r\n    const handleTodoSubmit = useCallback(\r\n        (e: React.FormEvent<HTMLFormElement>) => {\r\n            e.preventDefault();\r\n            setTodoInput(\"\");\r\n            onAdd(todoInput, uniqueId());\r\n        },\r\n        [todoInput, onAdd]\r\n    );\r\n\r\n    return { todoInput, handleTodoChange, handleTodoSubmit };\r\n};\r\n\r\nexport default useAddTodo;\r\n","import React from \"react\";\r\nimport { useAddTodoContext } from \"./AddTodoFormContext\";\r\n\r\nconst AddTodoInput = () => {\r\n    const { todoInput, handleTodoChange } = useAddTodoContext();\r\n    return <input type=\"text\" value={todoInput} onChange={handleTodoChange} />;\r\n};\r\n\r\nexport default AddTodoInput;\r\n","import React from \"react\";\r\n\r\nexport interface IButtonProps extends React.ComponentPropsWithoutRef<\"button\"> {\r\n    text?: string | string[];\r\n}\r\n\r\nconst Button = (props: IButtonProps) => (\r\n    <button {...props}>{props.text ? props.text : props.children}</button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button, { IButtonProps } from \"../Button\";\r\n\r\nconst AddButton = (props: IButtonProps) => <Button type=\"submit\" {...props} />;\r\n\r\nexport default AddButton;\r\n","import React from \"react\";\r\nimport { AddTodoContext } from \"./AddTodoFormContext\";\r\nimport useAddTodo from \"./useAddTodo\";\r\nimport Input from \"./Input\";\r\nimport AddButton from \"./AddButton\";\r\n\r\ntype AddTodoFormProps = {\r\n    children: React.ReactNode;\r\n    onAdd: (todo: string, id: string) => void;\r\n};\r\n\r\nconst AddTodoForm = ({ children, onAdd }: AddTodoFormProps) => {\r\n    const { todoInput, handleTodoChange, handleTodoSubmit } = useAddTodo(onAdd);\r\n\r\n    return (\r\n        <AddTodoContext.Provider\r\n            value={{\r\n                todoInput,\r\n                handleTodoChange,\r\n            }}\r\n        >\r\n            <form onSubmit={handleTodoSubmit}>{children}</form>\r\n        </AddTodoContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AddTodoForm;\r\n\r\nexport { Input, AddButton };\r\n","import React from \"react\";\r\nimport { ITodo } from \"../types\";\r\n\r\ntype TodosListProps = {\r\n    todos: ITodo[];\r\n    children: (el: ITodo) => React.ReactNode;\r\n};\r\n\r\nconst TodosList = ({ todos, children }: TodosListProps) => (\r\n    <ul>\r\n        {todos.map((el) => (\r\n            <li key={el.id}>{children(el)}</li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default TodosList;\r\n","import { ITodo } from \"../../types\";\r\nimport useCreateControlledContext from \"../../utils/useCreateControlledContext\";\r\n\r\nexport interface ITodoItem {\r\n    todo: ITodo;\r\n    onRemove: (id: string) => void;\r\n    onCompletion: (id: string) => void;\r\n}\r\n\r\nconst [useTodoItemContext, TodoItemContext] = useCreateControlledContext<\r\n    ITodoItem\r\n>(\"TodoItemContext\");\r\n\r\nexport { useTodoItemContext, TodoItemContext };\r\n","import React from \"react\";\r\nimport Button, { IButtonProps } from \"../Button\";\r\nimport { useTodoItemContext } from \"./TodoItemContext\";\r\n\r\nconst RemoveButton = (props: IButtonProps) => {\r\n    const {\r\n        todo: { id },\r\n        onRemove,\r\n    } = useTodoItemContext();\r\n\r\n    return <Button type=\"button\" onClick={() => onRemove(id)} {...props} />;\r\n};\r\nexport default RemoveButton;\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useTodoItemContext } from \"./TodoItemContext\";\r\n\r\ntype CompletionButton = {\r\n    texts: string[];\r\n};\r\n\r\nconst CompletionButton = (props: CompletionButton) => {\r\n    const {\r\n        todo: { id, isDone },\r\n        onCompletion,\r\n    } = useTodoItemContext();\r\n    const [doneText, undoneText] = props.texts;\r\n    return (\r\n        <Button\r\n            type=\"button\"\r\n            onClick={() => onCompletion(id)}\r\n            text={isDone ? undoneText : doneText}\r\n        />\r\n    );\r\n};\r\nexport default CompletionButton;\r\n","import React from \"react\";\r\nimport { useTodoItemContext } from \"./TodoItemContext\";\r\nimport \"./Text.css\";\r\n\r\nconst Text = () => {\r\n    const {\r\n        todo: { text, isDone },\r\n    } = useTodoItemContext();\r\n\r\n    const attributes = isDone ? { className: \"done\" } : {};\r\n    return <span {...attributes}>{text}</span>;\r\n};\r\n\r\nexport default Text;\r\n","import React from \"react\";\r\nimport { TodoItemContext, ITodoItem } from \"./TodoItemContext\";\r\nimport RemoveButton from \"./RemoveButton\";\r\nimport CompletionButton from \"./CompletionButton\";\r\nimport Text from \"./Text\";\r\n\r\ntype TodoItemProps = ITodoItem & {\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst TodoItem = ({\r\n    children,\r\n    todo,\r\n    onRemove,\r\n    onCompletion,\r\n}: TodoItemProps) => {\r\n    return (\r\n        <TodoItemContext.Provider value={{ todo, onRemove, onCompletion }}>\r\n            <div>{children}</div>\r\n        </TodoItemContext.Provider>\r\n    );\r\n};\r\n\r\nexport default TodoItem;\r\n\r\nexport { RemoveButton, CompletionButton, Text };\r\n","import { useState, useCallback } from \"react\";\r\nimport { ITodo } from \"../types\";\r\n\r\nconst useTodos = () => {\r\n    const [todos, setTodos] = useState<ITodo[]>([]);\r\n\r\n    const addTodo = useCallback(\r\n        (text: string, id: string) =>\r\n            setTodos((prev) => {\r\n                const newTodo: ITodo = { text, id, isDone: false };\r\n                return [...prev, newTodo];\r\n            }),\r\n        []\r\n    );\r\n\r\n    const removeTodo = useCallback(\r\n        (id: string) => {\r\n            setTodos((prev) => todos.filter((todo) => id !== todo.id));\r\n        },\r\n        [todos]\r\n    );\r\n\r\n    const toggleDone = useCallback((id: string) => {\r\n        const updateDone = (prevTodo: ITodo) =>\r\n            prevTodo.id === id\r\n                ? { ...prevTodo, isDone: !prevTodo.isDone }\r\n                : prevTodo;\r\n        setTodos((prev) => prev.map(updateDone));\r\n    }, []);\r\n\r\n    return { todos, addTodo, removeTodo, toggleDone };\r\n};\r\n\r\nexport default useTodos;\r\n","import React from \"react\";\r\nimport { ITodos, $TSFixMe } from \"../types\";\r\nimport useCreateControlledContext from \"../utils/useCreateControlledContext\";\r\nimport useTodos from \"./useTodos\";\r\n\r\ninterface ITodosContext extends ITodos {}\r\n\r\nconst [useTodosContext, TodosContext] = useCreateControlledContext<\r\n    ITodosContext\r\n>(\"TodosContext\");\r\n\r\nconst TodosContextProvider = (props: $TSFixMe) => {\r\n    const { todos, addTodo, removeTodo, toggleDone } = useTodos();\r\n    return (\r\n        <TodosContext.Provider\r\n            value={{ todos, addTodo, removeTodo, toggleDone }}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport { useTodosContext, TodosContextProvider };\r\n","import React from \"react\";\r\nimport {\r\n    HEADER,\r\n    ADD_BUTTON,\r\n    REMOVE_BUTTON,\r\n    DONE_BUTTON,\r\n    UNDONE_BUTTON,\r\n} from \"../constants/labels\";\r\nimport AddTodoForm, {\r\n    Input,\r\n    AddButton,\r\n} from \"../common-components/AddTodoForm/AddTodoForm\";\r\nimport TodosList from \"../common-components/TodosList\";\r\nimport TodoItem, {\r\n    Text,\r\n    RemoveButton,\r\n    CompletionButton,\r\n} from \"../common-components/TodoItem/TodoItem\";\r\nimport { ITodo } from \"../types\";\r\nimport { useTodosContext } from \"../todos/TodosContext\";\r\n\r\nconst MainView = () => {\r\n    const { todos, addTodo, removeTodo, toggleDone } = useTodosContext();\r\n\r\n    return (\r\n        <>\r\n            <h1>{HEADER}</h1>\r\n            <AddTodoForm onAdd={addTodo}>\r\n                <Input />\r\n                <AddButton>{ADD_BUTTON}</AddButton>\r\n            </AddTodoForm>\r\n            <TodosList todos={todos}>\r\n                {(todo: ITodo) => (\r\n                    <TodoItem\r\n                        todo={todo}\r\n                        onRemove={removeTodo}\r\n                        onCompletion={toggleDone}\r\n                    >\r\n                        <Text />\r\n                        <RemoveButton>{REMOVE_BUTTON}</RemoveButton>\r\n                        <CompletionButton\r\n                            texts={[DONE_BUTTON, UNDONE_BUTTON]}\r\n                        />\r\n                    </TodoItem>\r\n                )}\r\n            </TodosList>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainView;\r\n","export const HEADER = \"Todos\";\r\nexport const ADD_BUTTON = \"Add\";\r\nexport const REMOVE_BUTTON = \"Remove\";\r\nexport const DONE_BUTTON = \"Done\";\r\nexport const UNDONE_BUTTON = \"Undo\";\r\n","import React from \"react\";\nimport MainView from \"./views/MainView\";\nimport { TodosContextProvider } from \"./todos/TodosContext\";\n\nconst App = () => {\n    return (\n        <>\n            <TodosContextProvider>\n                <MainView />\n            </TodosContextProvider>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}